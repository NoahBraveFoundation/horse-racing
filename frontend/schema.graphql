"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type AdminStats {
  giftBasketCount: Int!
  sponsorCount: Int!
  ticketCount: Int!
}

type Cart {
  cost: CartCost!
  giftBasketInterests: [GiftBasketInterest!]!
  horses: [Horse!]!
  id: UUID
  orderNumber: String!
  sponsorInterests: [SponsorInterest!]!
  status: CartStatus!
  tickets: [Ticket!]!
  user: User!
  venmoLink: String!
  venmoUser: String!
}

type CartCost {
  horseCents: Int!
  sponsorCents: Int!
  ticketsCents: Int!
  totalCents: Int!
}

enum CartStatus {
  open
  checkedOut
  abandoned
}

scalar Date

type GiftBasketInterest {
  costCents: Int!
  description: String!
  id: UUID
  user: User!
}

type Horse {
  costCents: Int!
  horseName: String!
  id: UUID
  lane: Lane!
  owner: User!
  ownershipLabel: String!
  round: Round!
  state: HorseEntryState!
}

enum HorseEntryState {
  on_hold
  pending_payment
  confirmed
}

type Lane {
  horse: Horse
  id: UUID
  number: Int!
  round: Round!
}

type LoginPayload {
  message: String!
  success: Boolean!
  tokenId: String!
}

type LogoutPayload {
  message: String!
  success: Boolean!
}

type Mutation {
  addGiftBasketToCart(description: String!): GiftBasketInterest!
  addHorseToCart(roundId: UUID!, laneId: UUID!, horseName: String!, ownershipLabel: String!): Horse!
  addSponsorToCart(companyName: String!, companyLogoBase64: String): SponsorInterest!
  addTicketToCart(attendeeFirst: String!, attendeeLast: String!): Ticket!
  checkoutCart: Payment!
  createUser(email: String!, firstName: String!, lastName: String!): User!
  getOrCreateCart: Cart!
  login(email: String!, redirectTo: String): LoginPayload!
  logout: LogoutPayload!
  markPaymentReceived(paymentId: UUID!): Payment!
  releaseCart(cartId: UUID!): Cart!
  releaseHorse(horseId: UUID!): Boolean!
  removeGiftBasketFromCart(giftId: UUID!): Boolean!
  removeHorseFromCart(horseId: UUID!): Boolean!
  removeSponsorFromCart(sponsorId: UUID!): Boolean!
  removeTicketFromCart(ticketId: UUID!): Boolean!
  renameHorse(horseId: UUID!, horseName: String!, ownershipLabel: String!): Horse!
  runAdminCleanup: Boolean!
  setUserAdmin(userId: UUID!, isAdmin: Boolean!): User!
  validateToken(token: String!): ValidateTokenPayload!
}

type Payment {
  id: UUID
  paymentReceived: Boolean!
  paymentReceivedAt: Date
  totalCents: Int!
  user: User!
}

type Query {
  abandonedCarts: [Cart!]!
  adminStats: AdminStats!
  allHorses: [Horse!]!
  giftBasketInterests: [GiftBasketInterest!]!
  lanes(roundId: UUID!): [Lane!]!
  me: User!
  myCart: Cart
  paymentStatus: Payment
  pendingPayments: [Payment!]!
  rounds: [Round!]!
  sponsorInterests: [SponsorInterest!]!
  users: [User!]!
}

type Round {
  endAt: Date!
  horses: [Horse!]!
  id: UUID
  lanes: [Lane!]!
  name: String!
  startAt: Date!
}

type SponsorInterest {
  companyLogoBase64: String
  companyName: String!
  costCents: Int!
  id: UUID
  user: User!
}

type Ticket {
  attendeeFirst: String!
  attendeeLast: String!
  canRemove: Boolean!
  costCents: Int!
  id: UUID
  owner: User!
  state: TicketState!
}

enum TicketState {
  on_hold
  pending_payment
  confirmed
}

type User {
  email: String!
  firstName: String!
  giftBasketInterests: [GiftBasketInterest!]!
  horses: [Horse!]!
  id: UUID
  isAdmin: Boolean!
  lastName: String!
  payment: [Payment!]!
  sponsorInterests: [SponsorInterest!]!
  tickets: [Ticket!]!
}

scalar UUID

type ValidateTokenPayload {
  message: String!
  success: Boolean!
  user: User
}

